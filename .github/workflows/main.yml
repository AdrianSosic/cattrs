---
name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "pypy-3.8"]
      fail-fast: false

    steps:
      - uses: "actions/checkout@v2"

      - uses: "actions/setup-python@v4"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip wheel pdm
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox"

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    name: "Combine & check coverage."
    needs: "tests"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/setup-python@v4"
        with:
          cache: "pip"

      - run: "python -Im pip install --upgrade coverage[toml]"

      - uses: "actions/download-artifact@v3"
        with:
          name: "coverage-data"

      - name: "Combine coverage"
        run: |
          python -Im coverage combine
          python -Im coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -Im coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY

      - name: "Upload HTML report."
        uses: "actions/upload-artifact@v3"
        with:
          name: "html-report"
          path: "htmlcov"

  package:
    name: "Build & verify package"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"

      - name: "Install pdm, check-wheel-content, and twine"
        run: "python -m pip install pdm twine check-wheel-contents"
      - name: "Build package"
        run: "pdm build"
      - name: "List result"
        run: "ls -l dist"
      - name: "Check wheel contents"
        run: "check-wheel-contents --toplevel cattr,cattrs dist/*.whl"
      - name: "Check long_description"
        run: "python -m twine check dist/*"
